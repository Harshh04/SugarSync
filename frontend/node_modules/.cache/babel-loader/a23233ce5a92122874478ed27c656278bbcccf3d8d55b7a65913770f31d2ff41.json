{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harsh\\\\OneDrive\\\\Desktop\\\\Study Materials\\\\Projects\\\\SugarSync\\\\frontend\\\\src\\\\components\\\\GetA1c.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from \"react\";\nimport { useAuthContext } from \"../hooks/useAuthContext\";\nimport { Chart, registerables } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst HbA1cAndGraph = () => {\n  _s();\n  const [hba1c, setHbA1c] = useState(\"\");\n  const [sugarLogs, setSugarLogs] = useState([]);\n  const {\n    user\n  } = useAuthContext();\n  const chartRef = useRef(null);\n  useEffect(() => {\n    // Fetch HbA1c\n    const fetchHbA1c = async () => {\n      const response = await fetch(\"/api/sugars/hba1c\", {\n        headers: {\n          Authorization: `Bearer ${user.token}` // Ensure you have the user's token\n        }\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setHbA1c(data.hba1c);\n      } else {\n        console.log(\"NO A1C DATA\");\n        console.log(response);\n      }\n    };\n\n    // Fetch sugar logs for the last 3 months\n    const fetchSugarLogs = async () => {\n      const response = await fetch(\"/api/sugars?timeframe=3months\", {\n        headers: {\n          Authorization: `Bearer ${user.token}` // Ensure you have the user's token\n        }\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setSugarLogs(data);\n        // Initialize graph here after data is fetched\n      }\n    };\n    fetchHbA1c();\n    fetchSugarLogs();\n  }, []);\n\n  // Initialize the graph with Chart.js in a useEffect hook based on sugarLogs state\n\n  useEffect(() => {\n    if (sugarLogs.length > 0) {\n      const ctx = chartRef.current.getContext(\"2d\");\n\n      // Check if chart instance exists\n      if (window.mySugarChart) {\n        window.mySugarChart.destroy(); // Destroy existing chart\n      }\n\n      // Create new chart instance and assign it to a global variable for later access\n      window.mySugarChart = new Chart(ctx, {\n        type: \"line\",\n        // or 'bar', 'pie', etc.\n        data: {\n          labels: sugarLogs.map(log => new Date(log.time).toLocaleDateString()),\n          // 'time' is a property of sugarLogs items\n          datasets: [{\n            label: \"Sugar Level\",\n            data: sugarLogs.map(log => log.sugarlvl),\n            // 'sugarlvl' is a property of sugarLogs items\n            fill: false,\n            borderColor: \"rgb(75, 192, 192)\",\n            tension: 0.1\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              type: \"linear\",\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  }, [sugarLogs]); // Dependency array includes sugarLogs\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"HbA1c: \", hba1c]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"sugarGraph\",\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(HbA1cAndGraph, \"tXze3wKN+sKsb5FHN5VzovHCAPU=\", false, function () {\n  return [useAuthContext];\n});\n_c = HbA1cAndGraph;\nexport default HbA1cAndGraph;\nvar _c;\n$RefreshReg$(_c, \"HbA1cAndGraph\");","map":{"version":3,"names":["useEffect","useState","useRef","useAuthContext","Chart","registerables","jsxDEV","_jsxDEV","register","HbA1cAndGraph","_s","hba1c","setHbA1c","sugarLogs","setSugarLogs","user","chartRef","fetchHbA1c","response","fetch","headers","Authorization","token","data","json","ok","console","log","fetchSugarLogs","length","ctx","current","getContext","window","mySugarChart","destroy","type","labels","map","Date","time","toLocaleDateString","datasets","label","sugarlvl","fill","borderColor","tension","options","scales","y","beginAtZero","children","fileName","_jsxFileName","lineNumber","columnNumber","id","ref","_c","$RefreshReg$"],"sources":["C:/Users/harsh/OneDrive/Desktop/Study Materials/Projects/SugarSync/frontend/src/components/GetA1c.js"],"sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\nimport { useAuthContext } from \"../hooks/useAuthContext\";\r\n\r\nimport { Chart, registerables } from \"chart.js\";\r\nChart.register(...registerables);\r\n\r\nconst HbA1cAndGraph = () => {\r\n  const [hba1c, setHbA1c] = useState(\"\");\r\n  const [sugarLogs, setSugarLogs] = useState([]);\r\n  const { user } = useAuthContext();\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch HbA1c\r\n    const fetchHbA1c = async () => {\r\n      const response = await fetch(\"/api/sugars/hba1c\", {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`, // Ensure you have the user's token\r\n        },\r\n      });\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        setHbA1c(data.hba1c);\r\n      } else {\r\n        console.log(\"NO A1C DATA\");\r\n        console.log(response);\r\n      }\r\n    };\r\n\r\n    // Fetch sugar logs for the last 3 months\r\n    const fetchSugarLogs = async () => {\r\n      const response = await fetch(\"/api/sugars?timeframe=3months\", {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`, // Ensure you have the user's token\r\n        },\r\n      });\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        setSugarLogs(data);\r\n        // Initialize graph here after data is fetched\r\n      }\r\n    };\r\n\r\n    fetchHbA1c();\r\n    fetchSugarLogs();\r\n  }, []);\r\n\r\n  // Initialize the graph with Chart.js in a useEffect hook based on sugarLogs state\r\n\r\n  useEffect(() => {\r\n    if (sugarLogs.length > 0) {\r\n      const ctx = chartRef.current.getContext(\"2d\");\r\n\r\n      // Check if chart instance exists\r\n      if (window.mySugarChart) {\r\n        window.mySugarChart.destroy(); // Destroy existing chart\r\n      }\r\n\r\n      // Create new chart instance and assign it to a global variable for later access\r\n      window.mySugarChart = new Chart(ctx, {\r\n        type: \"line\", // or 'bar', 'pie', etc.\r\n        data: {\r\n          labels: sugarLogs.map((log) =>\r\n            new Date(log.time).toLocaleDateString()\r\n          ), // 'time' is a property of sugarLogs items\r\n          datasets: [\r\n            {\r\n              label: \"Sugar Level\",\r\n              data: sugarLogs.map((log) => log.sugarlvl), // 'sugarlvl' is a property of sugarLogs items\r\n              fill: false,\r\n              borderColor: \"rgb(75, 192, 192)\",\r\n              tension: 0.1,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          scales: {\r\n            y: {\r\n              type: \"linear\",\r\n              beginAtZero: true,\r\n            },\r\n          },\r\n        },\r\n      });\r\n    }\r\n  }, [sugarLogs]); // Dependency array includes sugarLogs\r\n\r\n  return (\r\n    <div>\r\n      <h3>HbA1c: {hba1c}</h3>\r\n      <canvas id=\"sugarGraph\" ref={chartRef}></canvas>{\" \"}\r\n      {/* Modify this line to use ref */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HbA1cAndGraph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}