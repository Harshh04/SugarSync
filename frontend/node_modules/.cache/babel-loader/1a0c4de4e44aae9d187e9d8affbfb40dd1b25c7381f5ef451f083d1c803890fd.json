{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harsh\\\\OneDrive\\\\Desktop\\\\Study Materials\\\\Projects\\\\SugarSync\\\\frontend\\\\src\\\\components\\\\GetA1c.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from \"react\";\nimport { useAuthContext } from \"../hooks/useAuthContext\";\nimport { Chart } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HbA1cAndGraph = () => {\n  _s();\n  const [hba1c, setHbA1c] = useState(\"\");\n  const [sugarLogs, setSugarLogs] = useState([]);\n  const {\n    user\n  } = useAuthContext();\n  const chartRef = useRef(null); // Step 1: useRef to reference the canvas\n\n  useEffect(() => {\n    // Existing useEffect for fetching data\n  }, []);\n  useEffect(() => {\n    if (sugarLogs.length > 0) {\n      const ctx = chartRef.current.getContext(\"2d\");\n      new Chart(ctx, {\n        type: \"line\",\n        // or 'bar', 'pie', etc.\n        data: {\n          labels: sugarLogs.map(log => new Date(log.time).toLocaleDateString()),\n          // Assuming 'time' is a property of sugarLogs items\n          datasets: [{\n            label: \"Sugar Level\",\n            data: sugarLogs.map(log => log.sugarlvl),\n            // Assuming 'sugarlvl' is a property of sugarLogs items\n            fill: false,\n            borderColor: \"rgb(75, 192, 192)\",\n            tension: 0.1\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  }, [sugarLogs]); // Step 3: useEffect that depends on sugarLogs\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"HbA1c: \", hba1c]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"sugarGraph\",\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(HbA1cAndGraph, \"tXze3wKN+sKsb5FHN5VzovHCAPU=\", false, function () {\n  return [useAuthContext];\n});\n_c = HbA1cAndGraph;\nexport default HbA1cAndGraph;\nvar _c;\n$RefreshReg$(_c, \"HbA1cAndGraph\");","map":{"version":3,"names":["useEffect","useState","useRef","useAuthContext","Chart","jsxDEV","_jsxDEV","HbA1cAndGraph","_s","hba1c","setHbA1c","sugarLogs","setSugarLogs","user","chartRef","length","ctx","current","getContext","type","data","labels","map","log","Date","time","toLocaleDateString","datasets","label","sugarlvl","fill","borderColor","tension","options","scales","y","beginAtZero","children","fileName","_jsxFileName","lineNumber","columnNumber","id","ref","_c","$RefreshReg$"],"sources":["C:/Users/harsh/OneDrive/Desktop/Study Materials/Projects/SugarSync/frontend/src/components/GetA1c.js"],"sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\nimport { useAuthContext } from \"../hooks/useAuthContext\";\r\nimport { Chart } from \"chart.js\";\r\n\r\nconst HbA1cAndGraph = () => {\r\n  const [hba1c, setHbA1c] = useState(\"\");\r\n  const [sugarLogs, setSugarLogs] = useState([]);\r\n  const { user } = useAuthContext();\r\n  const chartRef = useRef(null); // Step 1: useRef to reference the canvas\r\n\r\n  useEffect(() => {\r\n    // Existing useEffect for fetching data\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (sugarLogs.length > 0) {\r\n      const ctx = chartRef.current.getContext(\"2d\");\r\n      new Chart(ctx, {\r\n        type: \"line\", // or 'bar', 'pie', etc.\r\n        data: {\r\n          labels: sugarLogs.map((log) =>\r\n            new Date(log.time).toLocaleDateString()\r\n          ), // Assuming 'time' is a property of sugarLogs items\r\n          datasets: [\r\n            {\r\n              label: \"Sugar Level\",\r\n              data: sugarLogs.map((log) => log.sugarlvl), // Assuming 'sugarlvl' is a property of sugarLogs items\r\n              fill: false,\r\n              borderColor: \"rgb(75, 192, 192)\",\r\n              tension: 0.1,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n            },\r\n          },\r\n        },\r\n      });\r\n    }\r\n  }, [sugarLogs]); // Step 3: useEffect that depends on sugarLogs\r\n\r\n  return (\r\n    <div>\r\n      <h3>HbA1c: {hba1c}</h3>\r\n      <canvas id=\"sugarGraph\" ref={chartRef}></canvas>{\" \"}\r\n      {/* Modify this line to use ref */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HbA1cAndGraph;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AACnD,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,KAAK,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM;IAAEY;EAAK,CAAC,GAAGV,cAAc,CAAC,CAAC;EACjC,MAAMW,QAAQ,GAAGZ,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE/BF,SAAS,CAAC,MAAM;IACd;EAAA,CACD,EAAE,EAAE,CAAC;EAENA,SAAS,CAAC,MAAM;IACd,IAAIW,SAAS,CAACI,MAAM,GAAG,CAAC,EAAE;MACxB,MAAMC,GAAG,GAAGF,QAAQ,CAACG,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;MAC7C,IAAId,KAAK,CAACY,GAAG,EAAE;QACbG,IAAI,EAAE,MAAM;QAAE;QACdC,IAAI,EAAE;UACJC,MAAM,EAAEV,SAAS,CAACW,GAAG,CAAEC,GAAG,IACxB,IAAIC,IAAI,CAACD,GAAG,CAACE,IAAI,CAAC,CAACC,kBAAkB,CAAC,CACxC,CAAC;UAAE;UACHC,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE,aAAa;YACpBR,IAAI,EAAET,SAAS,CAACW,GAAG,CAAEC,GAAG,IAAKA,GAAG,CAACM,QAAQ,CAAC;YAAE;YAC5CC,IAAI,EAAE,KAAK;YACXC,WAAW,EAAE,mBAAmB;YAChCC,OAAO,EAAE;UACX,CAAC;QAEL,CAAC;QACDC,OAAO,EAAE;UACPC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,WAAW,EAAE;YACf;UACF;QACF;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACzB,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEjB,oBACEL,OAAA;IAAA+B,QAAA,gBACE/B,OAAA;MAAA+B,QAAA,GAAI,SAAO,EAAC5B,KAAK;IAAA;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACvBnC,OAAA;MAAQoC,EAAE,EAAC,YAAY;MAACC,GAAG,EAAE7B;IAAS;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,EAAC,GAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEjD,CAAC;AAEV,CAAC;AAACjC,EAAA,CA/CID,aAAa;EAAA,QAGAJ,cAAc;AAAA;AAAAyC,EAAA,GAH3BrC,aAAa;AAiDnB,eAAeA,aAAa;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}