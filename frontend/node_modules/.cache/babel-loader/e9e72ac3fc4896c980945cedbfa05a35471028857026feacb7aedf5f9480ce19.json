{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harsh\\\\OneDrive\\\\Desktop\\\\Study Materials\\\\Projects\\\\SugarSync\\\\frontend\\\\src\\\\components\\\\GetA1c.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from \"react\";\nimport { useAuthContext } from \"../hooks/useAuthContext\";\nimport { Chart } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HbA1cAndGraph = () => {\n  _s();\n  const [hba1c, setHbA1c] = useState(\"\");\n  const [sugarLogs, setSugarLogs] = useState([]);\n  const {\n    user\n  } = useAuthContext();\n  const chartRef = useRef(null);\n  useEffect(() => {\n    // Fetch HbA1c\n    const fetchHbA1c = async () => {\n      const response = await fetch(\"/api/sugars/hba1c\", {\n        headers: {\n          Authorization: `Bearer ${user.token}` // Ensure you have the user's token\n        }\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setHbA1c(data.hba1c);\n      }\n    };\n\n    // Fetch sugar logs for the last 3 months\n    const fetchSugarLogs = async () => {\n      const response = await fetch(\"/api/sugars?timeframe=3months\", {\n        headers: {\n          Authorization: `Bearer ${user.token}` // Ensure you have the user's token\n        }\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setSugarLogs(data);\n        // Initialize graph here after data is fetched\n      }\n    };\n    fetchHbA1c();\n    fetchSugarLogs();\n  }, []);\n\n  // Initialize the graph with Chart.js in a useEffect hook based on sugarLogs state\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"HbA1c: \", hba1c]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"sugarGraph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(HbA1cAndGraph, \"S4csiEqP+VZcdwQZt6njDiNOXfM=\", false, function () {\n  return [useAuthContext];\n});\n_c = HbA1cAndGraph;\nexport default HbA1cAndGraph;\nvar _c;\n$RefreshReg$(_c, \"HbA1cAndGraph\");","map":{"version":3,"names":["useEffect","useState","useRef","useAuthContext","Chart","jsxDEV","_jsxDEV","HbA1cAndGraph","_s","hba1c","setHbA1c","sugarLogs","setSugarLogs","user","chartRef","fetchHbA1c","response","fetch","headers","Authorization","token","data","json","ok","fetchSugarLogs","children","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["C:/Users/harsh/OneDrive/Desktop/Study Materials/Projects/SugarSync/frontend/src/components/GetA1c.js"],"sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\nimport { useAuthContext } from \"../hooks/useAuthContext\";\r\n\r\nimport { Chart } from \"chart.js\";\r\n\r\nconst HbA1cAndGraph = () => {\r\n  const [hba1c, setHbA1c] = useState(\"\");\r\n  const [sugarLogs, setSugarLogs] = useState([]);\r\n  const { user } = useAuthContext();\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch HbA1c\r\n    const fetchHbA1c = async () => {\r\n      const response = await fetch(\"/api/sugars/hba1c\", {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`, // Ensure you have the user's token\r\n        },\r\n      });\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        setHbA1c(data.hba1c);\r\n      }\r\n    };\r\n\r\n    // Fetch sugar logs for the last 3 months\r\n    const fetchSugarLogs = async () => {\r\n      const response = await fetch(\"/api/sugars?timeframe=3months\", {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`, // Ensure you have the user's token\r\n        },\r\n      });\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        setSugarLogs(data);\r\n        // Initialize graph here after data is fetched\r\n      }\r\n    };\r\n\r\n    fetchHbA1c();\r\n    fetchSugarLogs();\r\n  }, []);\r\n\r\n  // Initialize the graph with Chart.js in a useEffect hook based on sugarLogs state\r\n\r\n  return (\r\n    <div>\r\n      <h3>HbA1c: {hba1c}</h3>\r\n      <canvas id=\"sugarGraph\"></canvas>{\" \"}\r\n      {/* This is where the graph will be rendered */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HbA1cAndGraph;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AACnD,SAASC,cAAc,QAAQ,yBAAyB;AAExD,SAASC,KAAK,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM;IAAEY;EAAK,CAAC,GAAGV,cAAc,CAAC,CAAC;EACjC,MAAMW,QAAQ,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAE7BF,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmB,EAAE;QAChDC,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUN,IAAI,CAACO,KAAK,EAAE,CAAE;QACzC;MACF,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAClC,IAAIN,QAAQ,CAACO,EAAE,EAAE;QACfb,QAAQ,CAACW,IAAI,CAACZ,KAAK,CAAC;MACtB;IACF,CAAC;;IAED;IACA,MAAMe,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;QAC5DC,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUN,IAAI,CAACO,KAAK,EAAE,CAAE;QACzC;MACF,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAClC,IAAIN,QAAQ,CAACO,EAAE,EAAE;QACfX,YAAY,CAACS,IAAI,CAAC;QAClB;MACF;IACF,CAAC;IAEDN,UAAU,CAAC,CAAC;IACZS,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;;EAEA,oBACElB,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,GAAI,SAAO,EAAChB,KAAK;IAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACvBvB,OAAA;MAAQwB,EAAE,EAAC;IAAY;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,EAAC,GAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAElC,CAAC;AAEV,CAAC;AAACrB,EAAA,CA/CID,aAAa;EAAA,QAGAJ,cAAc;AAAA;AAAA4B,EAAA,GAH3BxB,aAAa;AAiDnB,eAAeA,aAAa;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}